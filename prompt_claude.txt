# Audio Splitter Application Prompt

Create a Python GUI application for splitting audio files with automatic text association and the following specifications:

## Required Libraries
```python
import tkinter as tk
from tkinter import simpledialog
from tkinter import filedialog, messagebox
import pygame
import wave
import os
from pydub import AudioSegment
import threading
import csv
import glob
import json
import time
from docx import Document
import numpy as np
import librosa
import soundfile as sf
from pathlib import Path
```

## Core Features Required

### Audio Processing
- Load and play MP3/WAV files
- Convert segments to WAV (22050Hz, 16-bit, mono)
- Track playback position
- Split audio at marked points
- Save segments with continuous numbering

### Document Processing
- Load DOCX files
- Split text by ':' character into sentences
- Display as numbered list
- Highlight current sentence
- Auto-associate sentences with split points

### State Management
- Save/load progress via config.json
- Remember last position
- Track current sentence index
- Maintain split points list
- Continue from last state on reload

### GUI Elements
- Config management buttons (Create/Load)
- Playback controls
  * Play/Pause button (with Space hotkey hint)
  * Mark Point button (with Enter hotkey hint)
  * Forward/Back 5s buttons
- Progress slider with time display
- Split points list with remove option
- Text display window with highlighting
- Split Audio button

### Hotkeys
- Space: Play/Pause audio
- Enter: Mark split point

## Configuration File Structure
```json
{
    "input_audio_file": "path/to/audio.mp3",
    "output_directory": "path/to/output/dir",
    "metadata_file": "path/to/metadata.csv",
    "document_file": "path/to/document.docx",
    "split_points": [],
    "last_position": 0,
    "start_segment_number": 1,
    "current_sentence_index": 0
}
```

## Output Requirements

### Audio Segments
- Format: WAV
- Sample Rate: 22050 Hz
- Bit Depth: 16-bit
- Channels: Mono
- Naming: segment_1.wav, segment_2.wav, etc.

### Metadata File
- Format: CSV with '|' delimiter
- Structure: filename|text
- Example:
  ```
  filename|text
  segment_1.wav|First sentence text
  segment_2.wav|Second sentence text
  ```

## Critical Implementation Details

### Initialization
- NO autoplay when loading file
- Load config settings
- Initialize audio system
- Set up GUI elements
- Bind hotkeys

### State Tracking
- Save current_sentence_index in config
- Update index when marking points
- Track last split position
- Maintain segment numbering sequence

### Audio Processing
- Start from last position on reload
- Use start_segment_number only on first run
- Convert to mono if stereo
- Set correct sample rate and bit depth

### Text Association
- Auto-associate next sentence when marking
- Highlight current sentence
- Update highlight after marking
- Store associations for metadata

## User Workflow

1. Initial Setup:
   - Create new config OR load existing
   - Select all required files
   - Set starting segment number (if new)

2. Operation:
   - Press Space to play audio
   - Navigate to split point
   - Press Enter to mark (auto-pauses)
   - System associates with next sentence
   - Press Space to continue
   - Repeat for all sentences

3. Completion:
   - Click Split Audio
   - System creates WAV segments
   - Updates metadata.csv
   - Maintains state in config.json

The implementation should follow exactly these specifications, ensuring proper audio handling, text association, and state management throughout the application lifecycle.